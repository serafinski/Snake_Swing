package code;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class Game extends JFrame {

    Image zielone_Jablko;
    Image czerwona_Glowa;

    Image czerwonyTuluw;

    public Game (){

        this.setLayout(new CardLayout());

        this.setTitle("Snake!");
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        this.setResizable(false);

        this.setIconImage(MyWindow.logo.getImage());

        //dodaje w taki sposob, bo nie zamierzam tego używać nigdzie indziej
        this.add(new Gra());

        //pack bo bez tego linie nie narysują się odpowiednio
        this.pack();
        setVisible(true);
        this.setLocationRelativeTo(null);


        //panel.setBackground(Color.BLACK);
        //panel.setBorder(BorderFactory.createLineBorder(Color.RED,3));

        //this.add(panel);
    }

    public class Gra extends JPanel implements ActionListener{
        public static final int SZEROKOSC_OKNA = 750;
        public static final int WYSOKOSC_OKNA = 750;

        public static final int POLE_POWIERZCHNI = SZEROKOSC_OKNA * WYSOKOSC_OKNA;

        //jeden kwadrat na ekranie
        public static final int JEDNOSTKA = 30;

        //ile kwadratów na ekranie
        public static final int WSZYSTKIE_JEDNOSTKI_GRY = POLE_POWIERZCHNI/JEDNOSTKA;

        //opóźnienie dla timer'a — manipulowanie predkoscia gry
        public static int OPOZNIENIE = 200;

        //tablica zbierajaca polozenie koordynatów koordynaty_x ciala naszego węża (włącznie z głową)
        //wielkosc tablicy ustawiamy na jednostki gry, bo wąż nie będzie nigdy większy niż sama gra
        public static final int[] koordynaty_x = new int[WSZYSTKIE_JEDNOSTKI_GRY/JEDNOSTKA];

        //tablica zbierajaca polozenie koordynatów koordynaty_y ciala naszego węża
        public static final int[] koordynaty_y = new int[WSZYSTKIE_JEDNOSTKI_GRY];

        //z iloma czesciami ma startowac nasz snake
        public static int czesci_ciala = 3;

        public static int punkty = 0;

        public static int polozenieXjablka;
        public static int polozenieYjablka;

        public static int startowePolozenieXSnake;

        public static int startowePolozenieYSnake;

        //G - dla gora -> będzie zaczynał gre od chodzenia w gore
        public static char kierunek = 'P';

        //czy gra czy_dziala
        public static boolean czy_dziala = false;

        //Timer by ustawić prędkość
        Timer timer;

        //Random, by wylosować pozycje jabłka
        Random random;

        Gra(){
            zielone_Jablko = new ImageIcon("src/zasoby/jablko.png").getImage();
            czerwona_Glowa = new ImageIcon("src/zasoby/red_head.jpg").getImage();
            czerwonyTuluw = new ImageIcon("src/zasoby/red_square.jpg").getImage();


            random = new Random();
            //ponieważ użyto pack -> to ustawi nam odpowiedni rozmiar
            this.setPreferredSize(new Dimension(SZEROKOSC_OKNA, WYSOKOSC_OKNA));
            this.setBackground(Color.BLACK);

            //bez tego trzeba kliknąć na okno by w ogóle można było zacząć sterować
            this.setFocusable(true);

            //klawisze sluzace do sterowania
            this.addKeyListener(new KeyListener() {
                @Override
                public void keyTyped(KeyEvent e) {

                }

                @Override
                public void keyPressed(KeyEvent e) {
                    //ograniczamy możliwość zrobienia obrotu o 180 stopni
                    switch (e.getKeyCode()){

                        case KeyEvent.VK_LEFT:
                        case KeyEvent.VK_A:
                            if(kierunek != 'P'){
                                kierunek = 'L';
                            }
                            break;

                        case KeyEvent.VK_RIGHT:
                        case KeyEvent.VK_D:
                            if(kierunek != 'L'){
                                kierunek = 'P';
                            }
                            break;

                        case KeyEvent.VK_UP:
                        case KeyEvent.VK_W:
                            if (kierunek != 'D'){
                                kierunek = 'G';
                            }
                            break;

                        case KeyEvent.VK_DOWN:
                        case KeyEvent.VK_S:
                            if(kierunek != 'G'){
                                kierunek = 'D';
                            }
                            break;
                        case KeyEvent.VK_ENTER:
                            startGry();
                    }
                }

                @Override
                public void keyReleased(KeyEvent e) {

                }
            });
        }

        //inicjalizacja gry
        public void startGry(){
            //gra zaczna się od dodania jablka do gry
            dodajJablko();
            czy_dziala = true;
            //dajemy this bo klasa implementuje action listener'a
            timer = new Timer(OPOZNIENIE,this);
            //uruchomienie timer'a
            timer.start();
        }

        public void paint (Graphics g){
            super.paint(g);

            if(czy_dziala){
                siatka(g);
                narysujJablko(g);
                waz(g);
                wynik(g);
            }
            else {
                koniecGry(g);
            }
        }

        //rysowanie siatki
        public void siatka(Graphics g) {
            for (int i = 0; i < WYSOKOSC_OKNA / JEDNOSTKA; i++) {
                g.drawLine(i * JEDNOSTKA, 0, i * JEDNOSTKA, WYSOKOSC_OKNA);
                g.drawLine(0, i * JEDNOSTKA, SZEROKOSC_OKNA, i * JEDNOSTKA);
                g.setColor(Color.BLUE);
            }
        }

        //rysowanie Jablka
        public void narysujJablko(Graphics g) {
            g.drawImage(zielone_Jablko,polozenieXjablka,polozenieYjablka,null);
            //g.setColor(Color.GREEN);
            //g.fillOval(polozenieXjablka, polozenieYjablka, JEDNOSTKA, JEDNOSTKA);
        }
        //losowanie pozycji dla jablka
        public void dodajJablko(){
            polozenieXjablka = random.nextInt(SZEROKOSC_OKNA /JEDNOSTKA)*JEDNOSTKA;
            polozenieYjablka = random.nextInt(WYSOKOSC_OKNA /JEDNOSTKA)*JEDNOSTKA;
        }

        public void waz (Graphics g){
            for (int i = 0; i<czesci_ciala; i++){
                if (i == 0){
                    g.drawImage(czerwona_Glowa,koordynaty_x[i],koordynaty_y[i],null);
                    //g.setColor(Color.RED);
                    //g.fillRect(koordynaty_x[i], koordynaty_y[i],JEDNOSTKA,JEDNOSTKA);
                }
                else{
                    g.drawImage(czerwonyTuluw,koordynaty_x[i],koordynaty_y[i],null);
                    //g.setColor(Color.RED);
                    //g.fillRect(koordynaty_x[i], koordynaty_y[i],JEDNOSTKA,JEDNOSTKA);
                }
            }
        }

        //też do zmiany
        public void wynik (Graphics g){
            g.setColor(Color.WHITE);
            g.setFont(new Font("Jokerman",Font.PLAIN,30));
            FontMetrics metrics = getFontMetrics(g.getFont());
            g.drawString("Wynik: "+ punkty,(SZEROKOSC_OKNA - metrics.stringWidth("Wynik: " + punkty))/2,g.getFont().getSize());
        }


        public void ruch(){
            //loop iterujący po ciele snake'a
            for(int i = czesci_ciala; i>0;i--){
                //przesunięcie koordynatów o 1
                koordynaty_x[i] = koordynaty_x[i-1];
                koordynaty_y[i] = koordynaty_y[i-1];
            }

            //switch odpowiedzialny za zmiane kierunkow
            switch (kierunek) {
                //głowa przejdzie do nastepnej pozycji
                case 'G' -> koordynaty_y[0] = koordynaty_y[0] - JEDNOSTKA;
                case 'D' -> koordynaty_y[0] = koordynaty_y[0] + JEDNOSTKA;
                case 'L' -> koordynaty_x[0] = koordynaty_x[0] - JEDNOSTKA;
                case 'P' -> koordynaty_x[0] = koordynaty_x[0] + JEDNOSTKA;
            }
        }

        public void sprawdzJablko(){
            //sprawdzamy koordynaty głowy weza i jablka
            if((koordynaty_x[0] == polozenieXjablka) && (koordynaty_y[0] == polozenieYjablka)){
                czesci_ciala++;
                punkty +=10;

                //za każdym stworzeniem jabłka aż opóźnienie będzie 10
                if(OPOZNIENIE>10){
                    OPOZNIENIE=OPOZNIENIE-5;
                    timer.stop();
                    timer = new Timer(OPOZNIENIE,this);
                    timer.start();
                }

                dodajJablko();
            }
        }

        public void kolizja(){
            //czy głowa weszła w kolizje z ciałem
            for (int i = czesci_ciala;i>0;i--){
                //jeżeli głowa jest równa pozycją z indeksu i
                if((koordynaty_x[0] == koordynaty_x[i]) && (koordynaty_y[0] == koordynaty_y[i])){
                    //to zrobi game over
                    czy_dziala = false;
                }
            }
            //kolizja ze bokiem okienka

            //LEWY BOK
            if((koordynaty_x[0]<0)){
                czy_dziala = false;
            }
            //PRAWY BOK
            if((koordynaty_x[0]>= SZEROKOSC_OKNA-JEDNOSTKA)){
                czy_dziala =false;
            }
            //GÓRNY BOK
            if((koordynaty_y[0]<0)){
                czy_dziala = false;
            }
            //DOLNY BOK
            if ((koordynaty_y[0]>= WYSOKOSC_OKNA-JEDNOSTKA)){
                czy_dziala = false;
            }

            if (!czy_dziala){
                timer.stop();
            }
        }

        //to trzeba będzie zmienić
        public void koniecGry(Graphics g){

//            if(!czy_dziala){
//                JPanel panel = new JPanel();
//                JButton button = new JButton("Wyjdz do menu glownego");
//
//                this.add(panel);
//                panel.add(button);
//            }


        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if(czy_dziala){
                ruch();
                sprawdzJablko();
                kolizja();
            }
            repaint();
        }

    }
}



To restart the game with " Enter"  button  add this after the switch in class GamePanel:
}
if(e.getKeyCode() == KeyEvent.VK_ENTER) {
			if(!running) {
				running = true;
						bodyParts = 6;
						newApple();
						applesEaten = 0;
						x[0] = 0;
						y[0] = 0;
						 direction = 'R';
						timer.restart();
						new GamePanel();
						 repaint();
					}
			}
		}
	}
}
you still need to reset x and y array or old body will show